AWSTemplateFormatVersion: 2010-09-09
Description: Create a virtual network 3-tier (Public:2, Private:2, DB:2)

# =======================================
# Metadata
# =======================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Common Configuration"
        Parameters:
          - PJPrefix
          - Environment
      - Label:
          default: "VPC Configuration"
        Parameters:
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - RDSPrivateSubnet1CIDR
          - RDSPrivateSubnet2CIDR
      - Label:
          default: "Connectivity Options"
        Parameters:
          - EnableDBSubnetGroup
          - EnableNATGateway
          - EnableSSMVPCEndpoint
          - EnableS3VPCEndpoint

# =======================================
# Parameters
# =======================================
Parameters:
  PJPrefix:
    Type: String
    Default: testprefix
    MinLength: 1
    MaxLength: 12
    AllowedPattern: "[a-z0-9]+"
    Description: "Project prefix, consisting of lowercase letters and numbers."
    ConstraintDescription: "Must contain only lowercase letters and numbers."

  Environment:
    Type: String
    Default: dev
    AllowedValues: [ "dev", "stg", "prd" ]
    Description: "Deployment environment (dev, stg, or prd)."

  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/([0-9]{1,2})$
    Description: "CIDR block for the VPC."
    ConstraintDescription: "Must be a valid CIDR block."

  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/([0-9]{1,2})$
    Description: "CIDR block for Public Subnet 1."
    ConstraintDescription: "Must be a valid CIDR block for Public Subnet 1."

  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/([0-9]{1,2})$
    Description: "CIDR block for Public Subnet 2."
    ConstraintDescription: "Must be a valid CIDR block for Public Subnet 2."

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.11.0/24
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/([0-9]{1,2})$
    Description: "CIDR block for Private Subnet 1."
    ConstraintDescription: "Must be a valid CIDR block for Private Subnet 1."

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.12.0/24
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/([0-9]{1,2})$
    Description: "CIDR block for Private Subnet 2."
    ConstraintDescription: "Must be a valid CIDR block for Private Subnet 2."

  RDSPrivateSubnet1CIDR:
    Type: String
    Default: 10.0.21.0/24
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/([0-9]{1,2})$
    Description: "CIDR block for RDS Private Subnet 1."
    ConstraintDescription: "Must be a valid CIDR block for RDS Private Subnet 1."

  RDSPrivateSubnet2CIDR:
    Type: String
    Default: 10.0.22.0/24
    AllowedPattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/([0-9]{1,2})$
    Description: "CIDR block for RDS Private Subnet 2."
    ConstraintDescription: "Must be a valid CIDR block for RDS Private Subnet 2."

  EnableDBSubnetGroup:
    Type: String
    Default: false
    AllowedValues: [ "true", "false" ]
    Description: "Enable or disable the creation of a dedicated DB subnet group."
    ConstraintDescription: "Set to 'true' to create a dedicated DB subnet group."

  EnableNATGateway:
    Type: String
    Default: false
    AllowedValues: [ "true", "false" ]
    Description: "Enable or disable the NAT Gateway."
    ConstraintDescription: "Set to 'true' to enable NAT Gateway."

  EnableSSMVPCEndpoint:
    Type: String
    Default: false
    AllowedValues: [ "true", "false" ]
    Description: "Enable or disable the VPC Endpoint for AWS Systems Manager (SSM)."
    ConstraintDescription: "Set to 'true' to enable the VPC Endpoint for SSM."

  EnableS3VPCEndpoint:
    Type: String
    Default: false
    AllowedValues: [ "true", "false" ]
    Description: "Enable or disable the VPC Endpoint for Amazon S3."
    ConstraintDescription: "Set to 'true' to enable the VPC Endpoint for S3."

# =======================================
# Conditions
# =======================================
Conditions:
  CreateDBSubnetGroup: !Equals [!Ref EnableDBSubnetGroup, "true"]
  CreateNATGateway: !Equals [!Ref EnableNATGateway, "true"]
  CreateSSMVPCEndpoint: !Equals [!Ref EnableSSMVPCEndpoint, "true"]
  CreateS3Endpoint: !Equals [!Ref EnableS3VPCEndpoint, "true"]

# =======================================
# Resources
# =======================================
Resources:

  # -------------------------------------
  # VPC
  # -------------------------------------
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-vpc
        - Key: PJName
          Value: !Ref PJPrefix

  # -------------------------------------
  # Internet Gateway
  # -------------------------------------
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-igw
        - Key: PJName
          Value: !Ref PJPrefix

  # VPC Gateway Attachment Internet
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # -------------------------------------
  # Public Subnet
  # -------------------------------------
  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-Public-Subnet1
        - Key: PJName
          Value: !Ref PJPrefix

  # Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-Public-Subnet2
        - Key: PJName
          Value: !Ref PJPrefix

  # -------------------------------------
  # Private Subnet
  # -------------------------------------
  # Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-Private-Subnet1
        - Key: PJName
          Value: !Ref PJPrefix

  # Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-Private-Subnet2
        - Key: PJName
          Value: !Ref PJPrefix

  # -------------------------------------
  # RDS Private Subnet
  # -------------------------------------
  # RDS Private Subnet 1
  RDSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: !Ref RDSPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-RDSPrivate-Subnet1
        - Key: PJName
          Value: !Ref PJPrefix

  # RDS Private Subnet 2
  RDSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: !Ref RDSPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-RDSPrivate-Subnet2
        - Key: PJName
          Value: !Ref PJPrefix

  # -------------------------------------
  # Route Table
  # -------------------------------------
  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-Public-rtb
        - Key: PJName
          Value: !Ref PJPrefix

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-Private-rtb
        - Key: PJName
          Value: !Ref PJPrefix

  # RDS Private Route Table
  RDSPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-RDSPrivate-rtb
        - Key: PJName
          Value: !Ref PJPrefix

  # ---------------------------------------
  # Routing
  # ---------------------------------------
  # Public Subnet to InternetRoute
  PublicSubnetToInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Private Subnet to InternetRoute
  PrivateSubnetToInternetRoute:
    Type: AWS::EC2::Route
    Condition: CreateNATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [CreateNATGateway, !Ref NatGateway, !Ref AWS::NoValue]

  # ---------------------------------------
  # RouteTable Associate
  # ---------------------------------------
  # Public Subnet 1 RouteTable Association
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Public Subnet 2 RouteTable Association
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Subnet 1 RouteTable Association
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Private Subnet 2 RouteTable Association
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # RDS Private Subnet 1 RouteTable Association
  RDSPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RDSPrivateSubnet1
      RouteTableId: !Ref RDSPrivateRouteTable

  # RDS Private Subnet 2 RouteTable Association
  RDSPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RDSPrivateSubnet2
      RouteTableId: !Ref RDSPrivateRouteTable

  # -------------------------------------
  # NAT Gateway
  # -------------------------------------
  # NatGateway Elastic IP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: CreateNATGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-ngw-eip
        - Key: PJName
          Value: !Ref PJPrefix

  # NatGateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreateNATGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-ngw
        - Key: PJName
          Value: !Ref PJPrefix

  # -------------------------------------
  # SSM VPC Endpoint
  # -------------------------------------
  # VPC Endpoint SecurityGroup
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSSMVPCEndpoint
    Properties:
      GroupDescription: SG-for-VPCEndpoint
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCIDR
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443  
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-VPCEndpoint-SG
        - Key: PJName
          Value: !Ref PJPrefix

  # SSM VPC Endpoint
  EndpointSSM:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateSSMVPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [".", ["com.amazonaws", !Ref "AWS::Region", "ssm"]]
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  # SSMMessages Endpoint
  EndpointSSMMessages:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateSSMVPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [".", ["com.amazonaws", !Ref "AWS::Region", "ssmmessages"]]
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC 

  # EC2Messages Endpoint
  EndpointEC2Messages:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateSSMVPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [".", ["com.amazonaws", !Ref "AWS::Region", "ec2messages"]]
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  # -------------------------------------
  # S3 VPC Endpoint
  # -------------------------------------
  # S3 VPC Endpoint
  EndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateS3Endpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  # -------------------------------------
  # DB Subnet Group
  # -------------------------------------
  # DB Subunet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: CreateDBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${PJPrefix}-${Environment}-DB-Subnet
      DBSubnetGroupDescription: "-"
      SubnetIds:
        - !Ref RDSPrivateSubnet1
        - !Ref RDSPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${PJPrefix}-${Environment}-DB-Subnet-group
        - Key: PJName
          Value: !Ref PJPrefix

# =======================================
# Outputs
# =======================================
Outputs:
  # VPC
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-vpc

  VPCCIDR:
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-vpc-cidr

  # Public Subnet
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-Public-Subnet1

  PublicSubnet1CIDR:
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-Public-Subnet1-cidr

  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-Public-Subnet2

  PublicSubnet2CIDR:
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-Public-Subnet2-cidr

  # Private Subnet
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-Private-Subnet1

  PrivateSubnet1CIDR:
    Value: !Ref PrivateSubnet1CIDR
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-Private-Subnet1-cidr

  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-Private-Subnet2

  PrivateSubnet2CIDR:
    Value: !Ref PrivateSubnet2CIDR
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-Private-Subnet2-cidr

  # RDS Private Subnet
  RDSPrivateSubnet1:
    Value: !Ref RDSPrivateSubnet1
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-RDSPrivate-Subnet1

  RDSPrivateSubnet1CIDR:
    Value: !Ref RDSPrivateSubnet1CIDR
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-RDSPrivate-Subnet1-cidr

  RDSPrivateSubnet2:
    Value: !Ref RDSPrivateSubnet2
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-RDSPrivate-Subnet2

  RDSPrivateSubnet2CIDR:
    Value: !Ref RDSPrivateSubnet2CIDR
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-RDSPrivate-Subnet2-cidr

# DB SubnetGroup
  DBSubnetGroupName:
    Condition: CreateDBSubnetGroup
    Value: !Ref DBSubnetGroup
    Export:
      Name: !Sub ${PJPrefix}-${Environment}-DB-SubnetGroupName